#+STARTUP: content
#+TITLE: Emacs.org - init.el

* User settings and early stuff

#+begin_src emacs-lisp
  
  (setq
     user-full-name "NoZenSe"
     user-mail-address "nonsens@nozen.se")
  (set-language-environment "UTF-8")     ;; Set utf-8 language coding

  ;; The default is 800 kilobytes.  Measured in bytes. <- Systemcrafters idea! (=
  (setq gc-cons-threshold (* 50 1000 1000))


  ;; Move the set-custom to a separate file
  (setq custom-file  (expand-file-name "custom.el"(expand-file-name "litter/"  user-emacs-directory)))
  (unless (file-exists-p custom-file)
    (progn (make-directory (expand-file-name "litter/"  user-emacs-directory) t)(write-region "" nil custom-file)))
  (load custom-file)

#+end_src

* Use-package init

#+begin_src emacs-lisp
  
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
      (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
      (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)


#+end_src

* No-Littering

#+begin_src emacs-lisp

  (use-package no-littering
    :init
    (setq no-littering-etc-directory
          (expand-file-name "litter/config/" user-emacs-directory))
    (setq no-littering-var-directory
          (expand-file-name "litter/data/" user-emacs-directory))
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    (setq backup-directory-alist
          `((".*" . ,user-emacs-directory)))
    (setq auto-save-file-name-transforms
          `((".*" ,user-emacs-directory t))))

#+end_src

* One-liner quick settings

#+begin_src emacs-lisp

  (setq inhibit-splash-screen t)         ;; Disable the splash screen
  (setq inhibit-startup-message t)       ;; Disable startupmessage
  (setq-default cursor-type 'bar)        ;; Set cursor to bar
  (tool-bar-mode -1)                     ;; no need for tool-bars
  (menu-bar-mode -1)                     ;; no need for menus
  (scroll-bar-mode -1)                   ;; no scrollbar - plz!
  (save-place-mode 1)                    ;; save place mode
  (global-display-line-numbers-mode)     ;; Line numbers
  (global-hl-line-mode)                  ;; Highlight current line
  (transient-mark-mode 1)                ;; Enable transient mark mode
  (xterm-mouse-mode t)                   ;; Mouse support for xterm compatible terminals

  ;; Keybinds

  (setq visual-line-fringe-indicators    ;; Nice symbol for visiual-line-mode
        '(nil right-curly-arrow))
  (global-set-key (kbd "C-c w")          ;; Keybind for visiual-line-mode!
                  (lambda ()
                    (interactive)
                    (visual-line-mode 'toggle)))
  (global-set-key (kbd "C-c b")          ;; Keybind for speedbar
                  (lambda ()
                    (interactive)
                    (speedbar)))

#+end_src

* Org-mode + extras

#+begin_src emacs-lisp
        (use-package org
          :config
          ;; Don't show Done in agenda
          (setq org-agenda-skip-scheduled-if-done t)
          (setq org-agenda-skip-deadline-if-done t)
          ;; Log time of completion on TODOs -> DONE
          (setq org-log-done 'time)
          ;; Start org-mode in indented-mode
          (setq org-startup-indented t)
          ;; agenda setup
          (setq org-agenda-window-setup 'reorganize-frame)
          (setq org-agenda-restore-windows-after-quit t)
          ;; Hide the leading stars!
          (setq org-hide-leading-stars t)
          ;; Agenda files
          ;;(setq org-agenda-files '("~/org/toDo/"))
          ;; Org Keybinds - from the quick-start guide!
          (global-set-key (kbd "C-c l") #'org-store-link)
          (global-set-key (kbd "C-c a") #'org-agenda)
          (global-set-key (kbd "C-c c") #'org-capture)
          (setq org-fontify-whole-heading-line t))
        (use-package org-tidy
          :ensure t
          :hook
          (org-mode . org-tidy-mode)
          :config
          (setq org-tidy-properties-inline-symbol "+")
          (setq org-tidy-top-property-style 'keep))
        (use-package org-modern
          :config
          (add-hook 'org-mode-hook #'org-modern-mode)
          (add-hook 'org-agenda-finalize-hook #'org-modern-agenda))
  
#+end_src


* Evil-mode

#+begin_src emacs-lisp
;; Download Evil
  (unless (package-installed-p 'evil)
    (package-install 'evil))

;; Enable Evil
  (require 'evil)
  (evil-mode 1)

#+end_src

* Auto-complete

#+begin_src emacs-lisp
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1))

;; COMPANY-mode in-buffer completion!
(use-package company
  :config
  (add-hook 'after-init-hook 'global-company-mode))
  
#+end_src

** VMCEO
Vertico, Marginalia, Consult, Embark, Orderless
-  Vertico - Vertical completion in mini-buffer
-  Marginalia - More information in the margin of minibuffer
-  Consult - Search and navigation from list of candidates
-  Oderless - Makes the list-candidates searchable in more ways  
-  Embark - Context aware "command to run"
 https://cestlaz.github.io/post/using-emacs-80-vertico/

#+begin_src emacs-lisp

    ;; Vertico autocomplete
  (use-package vertico
    :config
    (vertico-mode t))

  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))


  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode))

  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
  )

#+end_src
* Other packages

#+begin_src emacs-lisp

    (use-package dracula-theme
      :config
      (load-theme 'dracula t))

    (use-package avy
      :bind (("M-g e" . avy-goto-word-0)
      ("M-g C-e" . avy-goto-word-0)
      ("M-g w" . avy-goto-word-1)
      ("M-g f" . avy-goto-line)
      ("C-'" . avy-goto-char-2)
      ("C-:" . avy-goto-char)))

    ;; Moody mode-bar!
    (use-package moody
      :config
      (setq x-underline-at-descent-line t)
      (moody-replace-mode-line-buffer-identification)
      (moody-replace-vc-mode)
      (moody-replace-eldoc-minibuffer-message-function))

    ;; Color nested stuff
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))

    ;; Hide minor-modes in a menu
    (use-package minions
      :config (minions-mode 1))

    (use-package wc-mode)
    (use-package s)
    (use-package auto-package-update) ;; Just have this to run it manualy
    (use-package htmlize)
    (use-package olc) ;; Open location code
    (use-package markdown-mode
      :mode "\\.md\\'")
    (use-package php-mode
      :mode "\\.php\\'")
    (use-package nov
      :config
      (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
      :mode "\\.epub\\'")
  (use-package adoc-mode
    :ensure t)
#+end_src

* Ending
#+begin_src emacs-lisp

  ;; stolen https://systemcrafters.net/emacs-from-scratch/cut-start-up-time-in-half/
  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                     (time-subtract after-init-time before-init-time)))
             gcs-done))
  (add-hook 'emacs-startup-hook #'efs/display-startup-time)

  ;; Make gc pauses faster by decreasing the threshold. <- Systemcrafters idea (=
  (setq gc-cons-threshold (* 2 1000 1000))
  
#+end_src
